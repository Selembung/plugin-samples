{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["// figma.showUI(__html__)\nfigma.ui.onmessage = async (numbers) => {\n  // Roboto Regular is the font that objects will be created with by default in\n  // Figma. We need to wait for fonts to load before creating text using them.\n  await figma.loadFontAsync({ family: \"Roboto\", style: \"Regular\" })\n\n  const frameWidth = 800\n  const frameHeight = 600\n  const chartX = 25\n  const chartY = 50\n  const chartWidth = frameWidth - 50\n  const chartHeight = frameHeight - 50\n\n  const frame = figma.createFrame()\n  frame.resizeWithoutConstraints(frameWidth, frameHeight)\n\n  // Center the frame in our current viewport so we can see it.\n  frame.x = figma.viewport.center.x - frameWidth / 2\n  frame.y = figma.viewport.center.y - frameHeight / 2\n\n  // Border for the chart\n  const border = figma.createRectangle()\n  frame.appendChild(border)\n  border.resizeWithoutConstraints(frameWidth, frameHeight)\n  border.strokeAlign = 'INSIDE'\n  border.strokeWeight = 3\n  border.fills = []\n  border.strokes = [{ type: 'SOLID', color: {r: 0, g: 0, b: 0} }]\n  border.constraints = {horizontal: 'STRETCH', vertical: 'STRETCH'}\n\n  // Line at the bottom of the chart\n  const line = figma.createRectangle()\n  frame.appendChild(line)\n  line.x = chartX\n  line.y = chartY + chartHeight\n  line.resizeWithoutConstraints(chartWidth, 3)\n  line.fills = [{ type: 'SOLID', color: {r: 0, g: 0, b: 0} }]\n  line.constraints = {horizontal: 'STRETCH', vertical: 'STRETCH'}\n\n  const min = numbers.reduce((a, b) => Math.min(a, b), 0)\n  const max = numbers.reduce((a, b) => Math.max(a, b), 0)\n\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    const left = chartX + chartWidth * (i + 0.25) / numbers.length;\n    const right = chartX + chartWidth * (i + 0.75) / numbers.length;\n    const top = chartY + chartHeight - chartHeight * (Math.max(0, num) - min) / (max - min);\n    const bottom = chartY + chartHeight - chartHeight * (Math.min(0, num) - min) / (max - min);\n\n    // The column\n    const column = figma.createRectangle()\n    frame.appendChild(column)\n    column.x = left\n    column.y = top\n    column.resizeWithoutConstraints(right - left, bottom - top)\n    column.fills = [{ type: 'SOLID', color: {r: 1, g: 0, b: 0} }]\n    column.constraints = {horizontal: 'STRETCH', vertical: 'STRETCH'}\n\n    // The label\n    const label = figma.createText()\n    frame.appendChild(label)\n    label.x = left - 50\n    label.y = top - 50\n    label.resizeWithoutConstraints(right - left + 100, 50)\n    label.fills = [{ type: 'SOLID', color: {r: 0, g: 0, b: 0} }]\n    label.characters = num.toString()\n    label.fontSize = 30\n    label.textAlignHorizontal = 'CENTER'\n    label.textAlignVertical = 'BOTTOM'\n    label.constraints = {horizontal: 'STRETCH', vertical: 'STRETCH'}\n  }\n\n  figma.closePlugin()\n}\n// Circular text sample code\n// Turns a selected text node into a set of letters on a circular arc.\n\n\n// Combines two transforms by doing a matrix multiplication.\n// The first transform applied is a, followed by b, which\n// is normally written b * a.\nfunction multiply(a, b) {\n  return [\n    [ a[0][0] * b[0][0] + a[0][1] * b[1][0], a[0][0] * b[0][1] + a[0][1] * b[1][1], a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] ],\n    [ a[1][0] * b[0][0] + a[1][1] * b[1][0], a[1][0] * b[0][1] + a[1][1] * b[1][1] + 0, a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] ]\n  ]\n}\n\n// Creates a \"move\" transform.\nfunction move(x, y) {\n  return [\n    [1, 0, x],\n    [0, 1, y]\n  ]\n}\n\n// Creates a \"rotate\" transform.\nfunction rotate(theta) {\n  return [\n    [Math.cos(theta), Math.sin(theta), 0],\n    [-Math.sin(theta), Math.cos(theta), 0]\n  ]\n}\n\n// MAIN PLUGIN CODE\n\nasync function main(): Promise<string | undefined> {\n  // Roboto Regular is the font that objects will be created with by default in\n  // Figma. We need to wait for fonts to load before creating text using them.\n  await figma.loadFontAsync({ family: \"Roboto\", style: \"Regular\" })\n\n  // Make sure the selection is a single piece of text before proceeding.\n  if (figma.currentPage.selection.length !== 1) {\n    return \"Select a single node.\"\n  }\n\n  const node = figma.currentPage.selection[0]\n  if (node.type !== 'TEXT') {\n    return \"Select a single text node.\"\n  }\n\n  // Replace spaces with nonbreaking spaces.\n  const text = node.characters.replace(/ /g, \" \")\n  let gap = 5\n\n  // Create a new text node for each character, and\n  // measure the total width.\n  const nodes = []\n  let width = 0\n  for (let i = 0; i < text.length; i++) {\n    const letterNode = figma.createText()\n    letterNode.fontSize = node.fontSize\n    letterNode.fontName = node.fontName\n\n    letterNode.characters = text.charAt(i)\n    width += letterNode.width\n    if (i !== 0) {\n      width += gap\n    }\n    node.parent.appendChild(letterNode)\n    nodes.push(letterNode)\n  }\n\n  // Make the radius half the width of the original text, minus a bit.\n  const r = node.width / 2 - 30\n  const pi = 3.1415926\n\n  // The arclength should be equal to the total desired width of the text,\n  // => theta * r = width\n  // => theta = width / r\n  //\n  // We define this angle such that 0 means pointing to the right, and pi/2 means\n  // pointing straight up.\n  //\n  // Using these conventions, the starting angle for our curved text is\n  // pi/2 + theta/2, and the ending angle is pi/2 - theta/2.\n\n  let angle = pi / 2 + width / (2*r)\n  const gapAngle = gap / r\n\n  const centerX = node.x + node.width / 2\n  const centerY = node.y + node.height / 2\n\n  // Walk through each letter and position it on a circle of radius r.\n  nodes.forEach(function (letterNode) {\n    const stepAngle = letterNode.width / r\n\n    // Move forward in our arc half a letter width.\n    angle -= stepAngle / 2\n\n    let width = letterNode.width\n    let height = letterNode.height\n\n    // Move the letter so that the center of its baseline is on the origin.\n    // (estimate the baseline as being 70% down from the top of the box).\n    //\n    // We accomplish this by moving the letter so its top left is at (0, 0),\n    // then moving the letter to the left and up by the appopriate amount.\n    letterNode.x = 0\n    letterNode.y = 0\n    letterNode.relativeTransform = multiply(move(-width/2, -0.7 * height), letterNode.relativeTransform)\n\n    // Rotate the letter. Because we want to have the rotation angle be 0 at the top of the circle,\n    // we need to subtract pi/2 before applying the rotation to the text.\n    letterNode.relativeTransform = multiply(rotate(angle - pi/2), letterNode.relativeTransform)\n\n    // Move the letter to its position on the arc.\n    let desiredX = centerX + r * Math.cos(angle)\n    let desiredY = centerY - r * Math.sin(angle)\n    letterNode.relativeTransform = multiply(move(desiredX, desiredY), letterNode.relativeTransform)\n\n    // Move forward in our arc half a letter width + the gap\n    angle -= stepAngle / 2 + gapAngle\n  })\n\n  // Put all nodes in a group!\n  figma.group(nodes, node.parent)\n}\n\nmain().then((message: string | undefined) => {\n  figma.closePlugin(message)\n})"],
  "mappings": "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",
  "names": []
}
